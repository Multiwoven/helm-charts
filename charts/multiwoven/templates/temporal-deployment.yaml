{{ if .Values.temporal.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}-temporal
  namespace: {{ .Values.kubernetesNamespace }}
  labels:
    io.kompose.service: temporal
    {{- include "chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.temporal.replicas }}
  selector:
    matchLabels:
      io.kompose.service: temporal
    {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/multiwoven-server-default: "true"
        io.kompose.service: temporal
      {{- include "chart.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.create | ternary .Values.serviceAccount.name "default" }}
      securityContext:
        fsGroup: {{ .Values.temporal.podSecurityContext.fsGroup }}
      serviceAccountName: {{ .Values.serviceAccount.create | ternary .Values.serviceAccount.name "default" }}
      securityContext:
        fsGroup: {{ .Values.temporal.podSecurityContext.fsGroup }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken.enabled }}
      initContainers:
      {{ if .Values.securityContext.readOnlyRootFilesystem }}
      - name: copy-config
        image: {{ .Values.temporal.temporal.image.repository }}:{{ .Values.temporal.temporal.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.globalImagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /mnt/temporal-config
            echo "Copying /etc/temporal to /mnt/temporal-config"
            cp -r /etc/temporal/* /mnt/temporal-config/ || echo "/etc/temporal directory is empty or missing"
        volumeMounts:
          - name: temporal-config
            mountPath: /mnt/temporal-config
        securityContext:
          runAsUser: {{ .Values.temporal.temporal.containerSecurityContext.runAsUser }}
          runAsGroup: {{ .Values.temporal.temporal.containerSecurityContext.runAsGroup }}
          privileged: false
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          capabilities:
            drop:
            {{- if .Values.securityContext.capabilities.drop.permissions }}
            {{- range .Values.securityContext.capabilities.drop.permissions }}
              - {{ . }}
            {{- end }}
            {{- end }}
      {{ end }}
      {{ if and .Values.multiwovenConfig.dbCloudEnabled }}
      - name: fetch-cloud-cert
        image: {{ .Values.temporal.temporal.image.repository }}:{{ .Values.temporal.temporal.image.tag | default .Chart.AppVersion }}
        command: ["/bin/sh", "-c"]
        {{ if eq .Values.multiwovenConfig.dbCloudProvider "azure" }}
        args:
          - |
            # Update package lists and install CA certificates
            apt update && apt install -y ca-certificates

            # Update CA certificates
            update-ca-certificates

            # Fetching Azure Flexible Server CA Certificate (DigiCert Global Root CA)
            echo "Fetching Azure CA Certificate..."
            wget https://dl.cacerts.digicert.com/DigiCertGlobalRootCA.crt.pem -O /etc/ssl/certs/azure-ca.pem

            # Verify that the certificate was downloaded
            ls -l /etc/ssl/certs/
        {{ else if eq .Values.multiwovenConfig.dbCloudProvider "aws" }}
        args:
          - |
            apt update && apt install -y ca-certificates
            update-ca-certificates
            echo "Fetching RDS CA Certificate..."
            wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem -O /etc/ssl/certs/rds-ca.pem
            ls -l /etc/ssl/certs/
        {{ end }}
        volumeMounts:
          - name: cloud-cert-volume
            mountPath: "/etc/ssl/certs"
        securityContext:
          runAsUser: {{ .Values.temporal.temporal.containerSecurityContext.runAsUser }}
          runAsGroup: {{ .Values.temporal.temporal.containerSecurityContext.runAsGroup }}
          privileged: false
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          capabilities:
            drop:
            {{- if .Values.securityContext.capabilities.drop.permissions }}
            {{- range .Values.securityContext.capabilities.drop.permissions }}
              - {{ . }}
            {{- end }}
            {{- end }}
        {{ end }}
      containers:
      - env:
        - name: TEMPORAL_TASK_QUEUE
          value: production-queue
        - name: POSTGRES_TLS_DISABLE_HOST_VERIFICATION
          value: "false"
        - name: POSTGRES_TLS_ENABLED
          value: "true"
        - name: SQL_TLS_ENABLED
          value: 'true'
        - name: SQL_TLS_DISABLE_HOST_VERIFICATION
          value: 'true'
        {{ if .Values.multiwovenConfig.skipDbMigration }}
        - name: SKIP_DB_CREATE
          value: "true"
        - name: SKIP_SCHEMA_SETUP
          value: "true"
        {{ end }}
        {{ if not .Values.multipleDbHosts.enabled }}
        - name: DB
          value: {{ quote .Values.temporal.temporal.env.db }}
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              key: DB_PORT
              name: {{ include "chart.fullname" . }}-config
        - name: POSTGRES_PWD
          valueFrom:
            {{ if not .Values.secretsStore.temporalSecretEnabled }}
            configMapKeyRef:
              key: DB_PASSWORD
              name: {{ include "chart.fullname" . }}-config
            {{ end }}
            {{ if .Values.secretsStore.temporalSecretEnabled}}
            secretKeyRef:
              name: {{ .Values.secretsStore.temporalSecretAlias }}
              key: TP_DB_PASSWORD
            {{ end }}
        - name: POSTGRES_SEEDS
          valueFrom:
            configMapKeyRef:
              key: DB_HOST
              name: {{ include "chart.fullname" . }}-config
        - name: POSTGRES_USER
          valueFrom:
            {{ if not .Values.secretsStore.temporalSecretEnabled }}
            configMapKeyRef:
              key: DB_USERNAME
              name: {{ include "chart.fullname" . }}-config
            {{ end }}
            {{ if .Values.secretsStore.temporalSecretEnabled}}
            secretKeyRef:
              name: {{ .Values.secretsStore.temporalSecretAlias }}
              key: TP_DB_USERNAME
            {{ end }}
        {{ end }}
        {{ if .Values.multiwovenConfig.temporalPostgresSsl }}
        - name: TEMPORAL_TLS_REQUIRE_CLIENT_AUTH
          value: 'true'
        - name: SQL_TLS
          value: 'true'
        - name: SQL_HOST_VERIFICATION
          value: 'false'
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        {{ end }}
        {{ if .Values.multipleDbHosts.enabled }}
        - name: TEMPORAL_DEFAULT_DB_NAME
          value: {{ .Values.multipleDbHosts.temporalDbName }}
        - name: TEMPORAL_DEFAULT_CONNECT_ADDR
          value: "{{ .Values.multipleDbHosts.temporalDbHost }}:5432"
        - name: TEMPORAL_DEFAULT_USER
          {{ if not .Values.secretsStore.temporalSecretEnabled }}
          value: {{ .Values.multipleDbHosts.temporalDbUsername }}
          {{ end }}
          {{ if .Values.secretsStore.temporalSecretEnabled }}
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secretsStore.temporalSecretAlias }}
                key: TP_DB_USERNAME
          {{end }}
        - name: TEMPORAL_DEFAULT_PASSWORD
          {{ if not .Values.secretsStore.temporalSecretEnabled }}
          value: {{ .Values.multipleDbHosts.temporalDbPassword }}
          {{ end }}
          {{ if .Values.secretsStore.temporalSecretEnabled }}
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secretsStore.temporalSecretAlias }}
                key: TP_DB_PASSWORD
          {{end }}
        - name: TEMPORAL_VISIBILITY_DB_NAME
          value: {{ .Values.multipleDbHosts.temporalVisibilityDbName }}
        - name: TEMPORAL_VISIBILITY_CONNECT_ADDR
          value: "{{ .Values.multipleDbHosts.temporalVisibilityDbHost }}:5432"
        - name: TEMPORAL_VISIBILITY_USER
          {{ if .Values.secretsStore.temporalSecretEnabled }}
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secretsStore.temporalVisibilitySecretAlias }}
                key: TPV_DB_USERNAME
          {{ else }}
          value: {{ .Values.multipleDbHosts.temporalVisibilityDbUsername }}
          {{end }}
        - name: TEMPORAL_VISIBILITY_PASSWORD
          {{ if .Values.secretsStore.temporalSecretEnabled }}
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secretsStore.temporalVisibilitySecretAlias }}
                key: TPV_DB_PASSWORD
          {{ else }}
          value: {{ .Values.multipleDbHosts.temporalVisibilityDbPassword }}
          {{end }}
        {{ end }}
        image: {{ .Values.temporal.temporal.image.repository }}:{{ .Values.temporal.temporal.image.tag | default .Chart.AppVersion }}
        # command: ["sleep", "3600"] # Prevent the container from crashing
        imagePullPolicy: {{ .Values.globalImagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.temporal.temporal.containerSecurityContext.runAsUser }}
          runAsGroup: {{ .Values.temporal.temporal.containerSecurityContext.runAsGroup }}
          privileged: false
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          capabilities:
            drop:
            {{- if .Values.securityContext.capabilities.drop.permissions }}
            {{- range .Values.securityContext.capabilities.drop.permissions }}
              - {{ . }}
            {{- end }}
            {{- end }}
        name: temporal
        ports:
        - containerPort: 7233
        resources: {{- toYaml .Values.temporal.temporal.resources | nindent 10 }}
        volumeMounts:
        {{ if and .Values.multiwovenConfig.dbCloudEnabled }}
        - name: cloud-cert-volume
          mountPath: "/etc/ssl/certs"
          readOnly: true
        {{ end }}
        {{ if .Values.secretsStore.temporalSecretEnabled }}
        - name: temporal-secrets-store
          mountPath: /run/secrets/temporal-secrets
          readOnly: true
        - name: temporal-visibility-secrets-store
          mountPath: /run/secrets/temporal-visibility-secrets
          readOnly: true
        {{ end }}
        {{ if .Values.securityContext.readOnlyRootFilesystem }}
        - name: temporal-config
          mountPath: /etc/temporal/
        {{ end }}
        {{ if .Values.multipleDbHosts.enabled }}
        - name: config
          mountPath: /etc/temporal/config/config_template.yaml
          subPath: config_template.yaml
        {{ end }}
      {{ if .Values.secretsStore.temporalSecretEnabled }}
      - name: temporal-secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ include "chart.fullname" . }}-secret-provider-class-temporal
      - name: temporal-visibility-secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ include "chart.fullname" . }}-secret-provider-class-temporal-visibility
      {{ end }}
      {{ if .Values.securityContext.readOnlyRootFilesystem }}
      - name: temporal-config
        emptyDir: {}
      {{ end }}
      {{ if .Values.multipleDbHosts.enabled }}
      - name: config
        configMap:
          name: "{{ include "chart.fullname" . }}-temporal-config"
      {{ end }}
      restartPolicy: Always
      {{ if .Values.multiwovenConfig.privateRepo }}
      imagePullSecrets:
        - name: {{ .Values.multiwovenConfig.registrySecretName }}
      {{ end }}
      {{ if .Values.multiwovenConfig.dbCloudEnabled }}
      volumes:
        - name: cloud-cert-volume
          emptyDir: {}
      {{ end }}
{{ end }}

