name: Deploy chart to staging env

on:
  pull_request:
    paths:
      - "charts/multiwoven/**"
    branches: [ main ]
    types:
      - labeled

permissions:
  id-token: write
  contents: read

env:
  CHARTS_DIR: charts
  CHART_PATH: charts/multiwoven
  CHART_NAME: multiwoven
  INFRA_REPO: Multiwoven/aisquared-infra
  INFRA_PATH: kubernetes/staging/aisquared
  ARGOCD_APP: aisquared-staging
  ARGOCD_SERVER_HOST: argocd-staging.squared.ai

concurrency:
  group: staging-deploy-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  publish_pr_chart:
    if: ${{ github.event.label.name == 'deploy-to-staging' || contains( github.event.pull_request.labels.*.name, 'deploy-to-staging') }}
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.setver.outputs.ver }}
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Set prerelease version
        id: setver
        run: |
          base=$(yq '.version' "$CHART_PATH/Chart.yaml")
          short=${GITHUB_SHA::7}
          ver="${base}-pr${{ github.event.number }}+${short}"
          yq -i ".version = \"${ver}\"" "$CHART_PATH/Chart.yaml"
          echo "ver=$ver" >> $GITHUB_OUTPUT

      - name: Release with chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.HELM_TOKEN }}"
        with:
          charts_dir: ${{ env.CHARTS_DIR }}

  bump_infra_dep_and_point_app:
    needs: publish_pr_chart
    if: needs.publish_pr_chart.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.AISQUARED_CI_BOT_APP_ID }}
          private_key: ${{ secrets.AISQUARED_CI_BOT_PRIVATE_KEY }}
          repository: Multiwoven/aisquared-infra

      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.INFRA_REPO }}
          token: ${{ steps.generate_token.outputs.token }}
          ref: main
          path: infra

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Install yq
        run: |
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Bump dependency version and update lock
        working-directory: infra/${{ env.INFRA_PATH }}
        run: |
          ver="${{ needs.publish_pr_chart.outputs.ver }}"
          yq -i ".dependencies[] |= ( if .name == \"${{ env.CHART_NAME }}\" then .version = \"${ver}\" else . end )" Chart.yaml
          helm dependency update .

      - name: Commit to a temporary branch
        working-directory: infra
        env:
          BRANCH_NAME: staging-test/pr-${{ github.event.number }}
        run: |
          git switch -c "$BRANCH_NAME" 2>/dev/null || git switch "$BRANCH_NAME"
          git add -A
          git -c user.name="github-actions[bot]" \
              -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
              commit -m "test(staging): bump ${{ env.CHART_NAME }} to ${{ needs.publish_pr_chart.outputs.ver }}"
          git push -u origin "$BRANCH_NAME" --force

      - name: Flip Argo CD app to temp branch and sync
        env:
          BRANCH_NAME: staging-test/pr-${{ github.event.number }}
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.12.3/argocd-linux-amd64
          chmod +x argocd && sudo mv argocd /usr/local/bin/argocd

          # Point app at the temp branch
          argocd app set "${{ env.ARGOCD_APP }}" \
            --server "${{ env.ARGOCD_SERVER_HOST }}" \
            --grpc-web \
            --auth-token "${{ secrets.ARGOCD_STAGING_TOKEN }}" \
            --revision "$BRANCH_NAME"

          # Auto-sync and wait for health
          argocd app sync "${{ env.ARGOCD_APP }}" \
            --server "${{ env.ARGOCD_SERVER_HOST }}" \
            --grpc-web \
            --auth-token "${{ secrets.ARGOCD_STAGING_TOKEN }}" \
            --prune --timeout 600

          argocd app wait "${{ env.ARGOCD_APP }}" \
            --server "${{ env.ARGOCD_SERVER_HOST }}" \
            --grpc-web \
            --auth-token "${{ secrets.ARGOCD_STAGING_TOKEN }}" \
            --health --timeout 600


  restore:
    if: (github.event.action == 'unlabeled' && github.event.label.name == 'deploy-to-staging') || github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.12.3/argocd-linux-amd64
          chmod +x argocd && sudo mv argocd /usr/local/bin/argocd

      - name: Restore app to main
        run: |
          argocd app set "${{ env.ARGOCD_APP }}" \
            --server "${{ env.ARGOCD_SERVER_HOST }}" \
            --auth-token "${{ secrets.ARGOCD_STAGING_TOKEN }}" \
            --grpc-web \
            --revision "main"
          argocd app sync "${{ env.ARGOCD_APP }}" \
            --server "${{ env.ARGOCD_SERVER_HOST }}" \
            --auth-token "${{ secrets.ARGOCD_STAGING_TOKEN }}" \
            --grpc-web \
            --prune --timeout 600
